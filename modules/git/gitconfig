[alias]
    # add
    a = add                           # add
    chunkyadd = add --patch           # stage commits chunk by chunk

    # add/remove in one go
    addremove = !git add -u "${@:-.}" && git add "${@:-.}" && git status
    ar = !git addremove

    # git reset hard
    rcc = !git reset "${@:-.}" && git checkout "${@:-.}"

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

    # show unmerged
    unmerged = !git --no-pager diff --name-only --diff-filter=U

    # branch
    b = branch -vv                    # branch (verbose)
    branches = branch -a

    # delete merged branches
    #delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    delete-merged = "!git branch --merged | grep -Ev '(^\\*|master|main|dev)' | xargs git branch -d"
    dm = delete-merged

    # add without whitespace
    addnw = !sh -c 'git diff -U0 -w --no-color | git apply --cached --ignore-whitespace --unidiff-zero -'

    # commit
    c = commit -m                     # commit with message
    ca = commit -am                   # commit all with message
    ci = commit                       # commit
    amend = commit --amend            # ammend your last commit
    ammend = commit --amend           # ammend your last commit
    cb = !git-cut-branch              # create a branch from where you are (useful if current work on master should be a branch)

    # checkout
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

    # ignore files
    ignore-tracked = update-index --assume-unchanged
    unignore-tracked = update-index --no-assume-unchanged

    # make a headless branch
    headless = !sh -c 'git symbolic-ref HEAD refs/heads/$0 && rm .git/index && git clean -fdx'

    # cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

    # diff
    d = diff                          # diff unstaged changes
    dc = diff --cached                # diff staged changes
    last = diff HEAD^                 # diff last committed change
    diffbranch = !git diff $(git merge-base master HEAD)..HEAD

    # log
    l = log --graph --date=short
    ll = log --pretty=oneline -n 20 --graph --abbrev-commit
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cs) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    ls = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    log1 = log --pretty=oneline
    logf = log --pretty=full
    logff = log --pretty=fuller
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # see top commit
    top = log -1

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # pull
    pl = pull                         # pull

    # push
    ps = push                         # push

    # rebase
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase

    # remote
    r = remote -v                     # show remotes (verbose)
    remotes = remote -v

    # reset
    unstage = reset HEAD              # remove files from index (tracking)
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    filelog = log -u                  # show changes to a file

    # nix a file's changes
    nix = !sh -c "git reset HEAD $1 && git checkout $1"

    # mergetool
    mt = mergetool                    # fire up the merge tool

    # stash
    ss = stash                        # stash changes
    sl = stash list                   # list stashes
    sa = stash apply                  # apply stash (restore changes)
    sd = stash drop                   # drop stashes (destory changes)

    # status
    s = status                        # status
    st = status                       # status
    stat = status                     # status

    # format-patch
    fp = format-patch --stdout        # format patch

    # tag
    t = tag -n                        # show tags with <n> lines of each tag message
    tags = tag -l

    # serve
    serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

    # svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # hub stuff
    browse       = !hub browse
    compare      = !hub compare

[user]
	name = Ian Duggan
	email = ian@ianduggan.net

[core]
    autocrlf = false
    editor = vim
	excludesfile = /Users/ijcd/.gitignore
    attributesfile = ~/.gitattributes
    whitespace = space-before-tab,indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false
    pager = mydiff-so-fancy | less --tabs=4 -RFX


#[color]
#	branch = auto
#	diff = auto
#	grep = auto
#	interactive = auto
#	showbranch = auto
#	status = auto
#	ui = auto
#
#[color "branch"]
#    current = yellow reverse
#    local = yellow
#    remote = green
#
#[color "diff"]
#    meta = yellow bold
#    frag = magenta bold
#    old = red bold
#    new = green bold
#
#[color "status"]
#    added = yellow
#    changed = green
#    untracked = cyan

[push]
    default = simple

[merge]
    summary = true
    verbosity = 1
    tool = diffmerge
#    tool = ediff
#    # Include summaries of merged commits in newly created merge commit messages
#    log = true
#	tool = kdiff3

[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
    renamelimit = 0
    tool = diffmerge
#    algorithm = patience
#	guitool = kdiff3
#	guitool = kdiff3

[mergetool]
    prompt = false
    keepBackup = false

[mergetool "ediff"]
    cmd = emacsclient -c -a \"\"  --eval \"(ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\")\"

[mergetool "kdiff3"]
	path = /Applications/kdiff3.app/Contents/MacOS/kdiff3
	trustExitCode = false
	path = /Applications/kdiff3.app/Contents/MacOS/kdiff3
	trustExitCode = false

[difftool "kdiff3"]
	path = /Applications/kdiff3.app/Contents/MacOS/kdiff3
	trustExitCode = false
	path = /Applications/kdiff3.app/Contents/MacOS/kdiff3
	trustExitCode = false

[merge "gemfilelock"]
    name = relocks the gemfile.lock
    driver = bundle lock

[mergetool "mvimdiff"]
    cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
    keepbackup=false

[mergetool "diffmerge"]
    cmd = diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
    trustExitCode = true

[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

[mergetool "vscode"]
  cmd = code --wait $MERGED

[difftool "diffmerge"]
    cmd = diffmerge --nosplash \"$LOCAL\" \"$REMOTE\"
    #cmd = diffmerge $LOCAL $REMOTE

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 

[apply]
  whitespace = fix

[branch]
  autosetupmerge = true

[branch "master"]
    # Option --no-commit instructs git not to commit the merge
    # by default. This allows me to do some final adjustment to the commit log
    # message before it gets commited.
    # Option --no-ff instructs git to always record a merge commit, even if
    # the branch being merged into can be fast-forwarded.
    # mergeoptions = --no-commit --no-ff
    # mergeoptions = --no-ff

[rerere]
	enabled = 1

[heroku]
	account = personal

[hub]
    http-clone = true
    host = git-aws.internal.justin.tv

[help]
    browser = gitscm

[browser "gitscm"]
    cmd = /bin/sh -c 'open http://git-scm.com/docs/$(basename $1 .html)' --

[github]
	user = ijcd
	password =

[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f

#
# Added by diff-so-fancy
#
[color]
	ui = true

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "diff"]
	meta = 11
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse

#
# End diff-so-fancy
#
