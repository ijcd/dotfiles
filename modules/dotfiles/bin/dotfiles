#!/usr/bin/env bash

# TODO:
#   * https://github.com/clvv/fasd
#   * install your dependencies, like "brew install ack"
#   * autoload as many functions as possible (autoload?)
#   * compile as much of startup as possible (zcompile?)
#   * grep for and remove passwords (irssi room password, for example)
#   * create a blacklist of files not to be pushed (grep password?)
#   * move dependencies (submodules to own directory, maybe make into subtrees?)
#   * switch to rbenv
#   * generate .MacOSX/environment.plist
#   * .pow setup
#   * what to do about things like gpg, ssh/config, etc
#   * should unison be synced? maybe have a private repo using vcsh for private things
#   * inputrc.symlink cleanup
#   * screenrc.symlink cleanup
#   * get clean git history w/out stray TODO files before commiting all the work upstream
#
# module def:   (look at oh-my-zsh and prezto, can we merge/incorporate?)
#   bin/*                   install or symlink?
#   topic/*.zsh             source
#   fpath                   function autoloads
#   topic/path.zsh          builds path
#   topic/completion.zsh    adds completions (look at prezto/oh-my-zsh)
#   topic/*.symlink         copy in as symlinks
#
#   * ability to partially include (completions, but not aliases, for example)
#   * look at command history on startup to suggest modules to add from list-modules ('suggest' module)
#   * check aliases when commands are run to see if one could have been used ('suggest' module)
#
# git module
#   * move git-* commands into .gitconfig aliases?
#   * move git-* commands into one file and symlink or alias from .gitconfig?
#   * .gitconfig.example -> .gitconfig
#
# ruby module
#   * install.sh should install rvm?
#   * rbenv.zsh
#
# grc module
#   * setup grc.zsh
#
# ssh module
#   * turn pubkey into a function
#
# vim module
#   * ryanb vim folder?
#
# not taken:
#   * holman/bin/cloudapp   copy files to cloudapp
#   * holman/bin/dot        install dependencies (osx defaults, brew update, brew install)


#set -x
set -e

DOTFILES_ROOT=~/.dotfiles

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

symlink () {
  to=$1
  from=$2
  ln -hfs $1 $2
  success "symlinked $2 -> $1"
}

test_symlink () {
  to=$1
  from=$2
  find -L $from -maxdepth 0 -samefile $to 2>/dev/null
}

list_modules () {
    tag=$1
    url=$2
    curl $url 2>/dev/null | grep js-directory-link | sed 's/^.*">//' | sed 's/<.*//' | awk -v t="$tag" '{print t "/" $1}'
}

install_prezto_links () {
    info "Setting up prezto"
    symlink $HOME/.zgen/sorin-ionescu/prezto-master $HOME/.zprezto
}

update_antigen () {
    source $(dirname $0)/antigen/antigen.zsh clone/antigen.zsh
    git submodule update --recursive
    antigen update
}

install_files () {
    link_pairs=$1

    local overwrite_all=false
    local backup_all=false
    local skip_all=false

    # read off pairs
    for ((i = 0; i < ${#link_pairs[@]}; i++, i++))
    do
        src=${link_pairs[$i]}
        dest=${link_pairs[$i+1]}

        # check if the file is already what we want
        if [ -n "$(test_symlink $src $dest)" ]
        then
            info "Already symlinked: $dest -> $src"
        else

            # we need to do something -- check if there is a file/directory already in place
            if [ -f "$dest" ] || [ -d "$dest" ]
            then

                local overwrite=false
                local backup=false
                local skip=false

                if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
                then
                  user "File already exists: $(basename $dest), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all (B)?"
                  read -n 1 action

                  case "$action" in
                    o) overwrite=true ;;
                    O) overwrite_all=true ;;
                    b) backup=true ;;
                    B) backup_all=true ;;
                    s) skip=true ;;
                    S) skip_all=true ;;
                    *) backup=true ;;
                  esac
                fi

                if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
                then
                  rm -rf $dest
                  success "removed $dest"
                fi

                if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
                then
                  mv $dest $dest\.backup
                  success "moved $dest to $dest.backup"
                fi

                if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
                then
                  symlink $src $dest
                else
                  success "skipped $src"
                fi
            else
                symlink $src $dest
            fi
        fi
    done
}

install_dotfiles () {
  info 'Installing dotfiles'

  link_pairs=()
  for src in $(find $DOTFILES_ROOT/modules/* -maxdepth 2 -name \*.symlink)
  do
      dest="$HOME/.$(basename ${src%.*})"
      link_pairs+=($src)
      link_pairs+=($dest)
  done

  install_files ${link_pairs[@]}
}

function clean_dotcache () {
    info "Cleaning ~/.zdotcache"
    rm -rf ~/.zdotcache
}

function clean_dotfiles () {
    info "Cleaning dotfiles"
    find $HOME -type l -maxdepth 1 -ls | grep $DOTFILES_ROOT | awk '{print $11}' | while read file ; do
        info "Removing $file"
        rm $file
    done
}

case $1 in

    install)
        # find the installers and run them iteratively
        # find . -name install.sh | while read installer ; do sh -c "${installer}" ; done

        (cd $DOTFILES_ROOT && {
            clean_dotcache
            clean_dotfiles
            install_prezto_links
            install_dotfiles
        })

        # # If we're on a Mac, let's install and setup homebrew.
        # if [ "$(uname -s)" == "Darwin" ]
        # then
        #   info "installing dependencies"
        #   if . bin/dot > /tmp/dotfiles-dot 2>&1
        #   then
        #     success "dependencies installed"
        #   else
        #     fail "error installing dependencies"
        #   fi
        # fi

        echo ''
        echo '  All installed!'

        ;;

    uninstall)
        clean_dotcache
        clean_dotfiles
        ;;

    update)
        # find the updaters and run them iteratively
        find . -name update.sh | while read update ; do sh -c "${update}" ; done
        update_antigen
        ;;

    list-modules)
        list_modules oh-my-zsh https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins
        list_modules prezto    https://github.com/sorin-ionescu/prezto/tree/master/modules
        ;;

    *)
        echo "Usage $0 install|update|list-modules|uninstall" 1>&2
        exit 1
        ;;

esac

